// –í–∞—à —Ñ–∞–π–ª `input.txt` —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö
// –ø—Ä–æ–±–µ–ª–∞–º–∏. –≠—Ç–æ —Å–ª–æ–≤–∞-—Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏ –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã.
// –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —ç—Ç–æ –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∏–∫–Ω–∏–∫! üçéü•ïü•ß
// –ó–∞–¥–∞–Ω–∏—è:
//        1. –û—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤:
//        –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤
// —Ñ–∞–π–ª–µ `input.txt`.
//        2. –ù–∞–π—Ç–∏ —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:
//        –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤
// —Ñ–∞–π–ª–µ.
// 3. –í—ã—á–∏—Å–ª–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —Å–ª–æ–≤:
//        –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–∞–∂–¥–æ–µ
// —Å–ª–æ–≤–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ–± —ç—Ç–æ–º –∫–∞–∫ –æ –ø–æ–¥—Å—á–µ—Ç–µ —Ç–æ–≥–æ,
// –∫–∞–∫–∏–µ —Ñ—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞ –≤–∞—à–µ–º –ø–∏–∫–Ω–∏–∫–µ!

package virtualpicnic;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class VirtualPicnic {
    public static void main(String[] args) {
        String filename = "input.txt";
        List<String> ls = new ArrayList<String>();

        openFile(filename, ls);

        System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ñ–∞–π–ª–µ - " + filename + " - " + ls.size());

        checkLongestWord(ls);

        statisticM(ls);


    }

    public static void openFile(String fileName, List<String> ls){
        try {
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            String string = reader.readLine();
            while (string != null){
                Collections.addAll(ls, string.split(" "));
                string = reader.readLine();
            }

            reader.close();
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        ls.removeIf(String::isEmpty);
    }

    public static void checkLongestWord(List<String> ls)
    {
        int temp = 0;
        String value = "";
        for(String str : ls){
            if(str.length() > temp) {
                temp = str.length();
                value = str;
            }
        }

        System.out.println("–°–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ - " + value + ", " + temp + " —Å–∏–º–≤–æ–ª–æ–≤");
    }

    public static void statisticM(List<String> ls){
        HashMap<String, Integer> map = new HashMap<String, Integer>();

        for (String i : ls  ){
            if(map.containsKey(i))
                map.put(i, map.get(i) + 1);
            else map.put(i,  1);
        }

        System.out.println(map);
        String[] values = new String[map.size()];
        //Set<String> mapValues =
        map.keySet().toArray(values);

        int maxVeget = 0;
        String maxVegetKey = values[0];
        for (int i = 0; i < values.length; i++) {
            if (maxVeget < map.get(values[i])) {
                maxVeget = map.get(values[i]);
                maxVegetKey = values[i];
            }
        }

        System.out.println("–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ñ—Ä—É–∫—Ç/–æ–≤–æ—â - " + maxVegetKey +
                " - " + map.get(maxVegetKey) + " –∑–Ω–∞—á–µ–Ω–∏–π.");
    }

}
